syntax = "proto3";
// @version: 1.6.14
// @author: wisdgod <nav@wisdgod.com>
// @license: MIT OR Apache-2.0
package aiserver.v1;
import "google/protobuf/timestamp.proto";
enum EmbeddingModel { // .aiserver.v1.EmbeddingModel
	EMBEDDING_MODEL_UNSPECIFIED = 0;
	EMBEDDING_MODEL_VOYAGE_CODE_2 = 1;
	EMBEDDING_MODEL_TEXT_EMBEDDINGS_LARGE_3 = 2;
	EMBEDDING_MODEL_QWEN_1_5B_CUSTOM = 3;
	EMBEDDING_MODEL_MOCK_CHUNKER_ERROR = 4;
	EMBEDDING_MODEL_QWEN_1_5B_0618_CUSTOM = 5;
	EMBEDDING_MODEL_QWEN_1_5B_0618_FP8_MM_CUSTOM = 6;
}
message CursorPosition { // .aiserver.v1.CursorPosition
	int32 line = 1;
	int32 column = 2;
}
message SelectionWithOrientation { // .aiserver.v1.SelectionWithOrientation
	int32 selection_start_line_number = 1;
	int32 selection_start_column = 2;
	int32 position_line_number = 3;
	int32 position_column = 4;
}
message SimplestRange { // .aiserver.v1.SimplestRange
	int32 start_line = 1;
	int32 end_line_inclusive = 2;
}
message SimpleRange { // .aiserver.v1.SimpleRange
	int32 start_line_number = 1;
	int32 start_column = 2;
	int32 end_line_number_inclusive = 3;
	int32 end_column = 4;
}
message LineRange { // .aiserver.v1.LineRange
	int32 start_line_number = 1;
	int32 end_line_number_inclusive = 2;
}
message CursorRange { // .aiserver.v1.CursorRange
	CursorPosition start_position = 1;
	CursorPosition end_position = 2;
}
message DetailedLine { // .aiserver.v1.DetailedLine
	string text = 1;
	float line_number = 2;
	bool is_signature = 3;
}
message CodeBlock { // .aiserver.v1.CodeBlock
	message Signatures { // .aiserver.v1.CodeBlock.Signatures
		repeated CursorRange ranges = 1;
	}
	string relative_workspace_path = 1;
	optional string file_contents = 2;
	optional int32 file_contents_length = 9;
	CursorRange range = 3;
	string contents = 4;
	Signatures signatures = 5;
	optional string override_contents = 6;
	optional string original_contents = 7;
	repeated DetailedLine detailed_lines = 8;
	FileGit file_git_context = 10;
}
message GitCommit { // .aiserver.v1.GitCommit
	string commit = 1;
	string author = 2;
	string date = 3;
	string message = 4;
}
message FileGit { // .aiserver.v1.FileGit
	repeated GitCommit commits = 1;
}
message Diagnostic { // .aiserver.v1.Diagnostic
	enum DiagnosticSeverity { // .aiserver.v1.Diagnostic.DiagnosticSeverity
		DIAGNOSTIC_SEVERITY_UNSPECIFIED = 0;
		DIAGNOSTIC_SEVERITY_ERROR = 1;
		DIAGNOSTIC_SEVERITY_WARNING = 2;
		DIAGNOSTIC_SEVERITY_INFORMATION = 3;
		DIAGNOSTIC_SEVERITY_HINT = 4;
	}
	message RelatedInformation { // .aiserver.v1.Diagnostic.RelatedInformation
		string message = 1;
		CursorRange range = 2;
	}
	string message = 1;
	CursorRange range = 2;
	DiagnosticSeverity severity = 3;
	repeated RelatedInformation related_information = 4;
}
message BM25Chunk { // .aiserver.v1.BM25Chunk
	string content = 1;
	SimplestRange range = 2;
	int32 score = 3;
	string relative_path = 4;
}
message CurrentFileInfo { // .aiserver.v1.CurrentFileInfo
	message NotebookCell { // .aiserver.v1.CurrentFileInfo.NotebookCell
	}
	string relative_workspace_path = 1;
	string contents = 2;
	bool rely_on_filesync = 18;
	optional string sha_256_hash = 17;
	repeated NotebookCell cells = 16;
	repeated BM25Chunk top_chunks = 10;
	int32 contents_start_at_line = 9;
	CursorPosition cursor_position = 3;
	repeated DataframeInfo dataframes = 4;
	int32 total_number_of_lines = 8;
	string language_id = 5;
	CursorRange selection = 6;
	optional int32 alternative_version_id = 11;
	repeated Diagnostic diagnostics = 7;
	optional int32 file_version = 14;
	repeated int32 cell_start_lines = 15;
	string workspace_root_path = 19;
	optional string line_ending = 20;
}
message AzureState { // .aiserver.v1.AzureState
	string api_key = 1;
	string base_url = 2;
	string deployment = 3;
	bool use_azure = 4;
}
message BedrockState { // .aiserver.v1.BedrockState
	string access_key = 1;
	string secret_key = 2;
	string region = 3;
	bool use_bedrock = 4;
	string session_token = 5;
}
message ModelDetails { // .aiserver.v1.ModelDetails
	optional string model_name = 1;
	optional string api_key = 2;
	optional bool enable_ghost_mode = 3;
	optional AzureState azure_state = 4;
	optional bool enable_slow_pool = 5;
	optional string openai_api_base_url = 6;
	optional BedrockState bedrock_state = 7;
	optional bool max_mode = 8;
}
message DataframeInfo { // .aiserver.v1.DataframeInfo
	message Column { // .aiserver.v1.DataframeInfo.Column
		string key = 1;
		string type = 2;
	}
	string name = 1;
	string shape = 2;
	int32 data_dimensionality = 3;
	repeated Column columns = 6;
	int32 row_count = 7;
	string index_column = 8;
}
message LinterError { // .aiserver.v1.LinterError
	string message = 1;
	CursorRange range = 2;
	optional string source = 3;
	repeated Diagnostic.RelatedInformation related_information = 4;
	optional Diagnostic.DiagnosticSeverity severity = 5;
}
message LinterErrors { // .aiserver.v1.LinterErrors
	string relative_workspace_path = 1;
	repeated LinterError errors = 2;
	string file_contents = 3;
}
message LspSubgraphPosition { // .aiserver.v1.LspSubgraphPosition
	int32 line = 1;
	int32 character = 2;
}
message LspSubgraphRange { // .aiserver.v1.LspSubgraphRange
	int32 start_line = 1;
	int32 start_character = 2;
	int32 end_line = 3;
	int32 end_character = 4;
}
message LspSubgraphContextItem { // .aiserver.v1.LspSubgraphContextItem
	optional string uri = 1;
	string type = 2;
	string content = 3;
	optional LspSubgraphRange range = 4;
}
message LspSubgraphFullContext { // .aiserver.v1.LspSubgraphFullContext
	string uri = 1;
	string symbol_name = 2;
	repeated LspSubgraphPosition positions = 3;
	repeated LspSubgraphContextItem context_items = 4;
	float score = 5;
}
enum FSUploadErrorType { // .aiserver.v1.FSUploadErrorType
	FS_UPLOAD_ERROR_TYPE_UNSPECIFIED = 0;
	FS_UPLOAD_ERROR_TYPE_NON_EXISTANT = 1;
	FS_UPLOAD_ERROR_TYPE_HASH_MISMATCH = 2;
}
enum FSSyncErrorType { // .aiserver.v1.FSSyncErrorType
	FS_SYNC_ERROR_TYPE_UNSPECIFIED = 0;
	FS_SYNC_ERROR_TYPE_NON_EXISTANT = 1;
	FS_SYNC_ERROR_TYPE_HASH_MISMATCH = 2;
}
message FSUploadFileRequest { // .aiserver.v1.FSUploadFileRequest
	string uuid = 1;
	string relative_workspace_path = 2;
	string contents = 3;
	int32 model_version = 4;
	optional string sha256_hash = 5;
}
message FSUploadFileResponse { // .aiserver.v1.FSUploadFileResponse
	FSUploadErrorType error = 1;
}
message FilesyncUpdateWithModelVersion { // .aiserver.v1.FilesyncUpdateWithModelVersion
	int32 model_version = 1;
	string relative_workspace_path = 2;
	repeated SingleUpdateRequest updates = 3;
	int32 expected_file_length = 4;
}
message SingleUpdateRequest { // .aiserver.v1.SingleUpdateRequest
	int32 start_position = 1;
	int32 end_position = 2;
	int32 change_length = 3;
	string replaced_string = 4;
	SimpleRange range = 5;
}
message FSSyncFileRequest { // .aiserver.v1.FSSyncFileRequest
	string uuid = 1;
	string relative_workspace_path = 2;
	int32 model_version = 3;
	repeated FilesyncUpdateWithModelVersion filesync_updates = 4;
	string sha256_hash = 5;
}
message FSSyncFileResponse { // .aiserver.v1.FSSyncFileResponse
	FSSyncErrorType error = 1;
}
message FSIsEnabledForUserRequest { // .aiserver.v1.FSIsEnabledForUserRequest
	string uuid = 1;
}
message FSIsEnabledForUserResponse { // .aiserver.v1.FSIsEnabledForUserResponse
	bool enabled = 1;
}
message FSGetFileContentsRequest { // .aiserver.v1.FSGetFileContentsRequest
	string uuid = 1;
	string auth_id = 2;
	string relative_workspace_path = 3;
	int32 model_version = 4;
	repeated FilesyncUpdateWithModelVersion filesync_updates = 5;
	optional string sha256_hash = 6;
}
message FSGetFileContentsResponse { // .aiserver.v1.FSGetFileContentsResponse
	string contents = 1;
	optional string sha256_hash = 2;
}
message FileRequest { // .aiserver.v1.FileRequest
	string relative_workspace_path = 1;
	optional int32 requested_version = 2;
	optional string sha256_hash = 3;
	bool required = 4;
}
message FSGetMultiFileContentsRequest { // .aiserver.v1.FSGetMultiFileContentsRequest
	string auth_id = 1;
	repeated FilesyncUpdateWithModelVersion filesync_updates = 2;
	repeated FileRequest file_requests = 3;
	bool get_all_recent_files = 4;
}
message FileRetrieved { // .aiserver.v1.FileRetrieved
	string relative_workspace_path = 1;
	string contents = 2;
	int32 model_version = 3;
	google.protobuf.Timestamp last_modified = 4;
}
message FSGetMultiFileContentsResponse { // .aiserver.v1.FSGetMultiFileContentsResponse
	repeated FileRetrieved files = 1;
}
message FSConfigRequest { // .aiserver.v1.FSConfigRequest
}
message FSConfigResponse { // .aiserver.v1.FSConfigResponse
	float check_filesync_hash_percent = 1;
	optional int32 rate_limiter_breaker_reset_time_ms = 2;
	optional int32 rate_limiter_rps = 3;
	optional int32 rate_limiter_burst_capacity = 4;
	optional int32 max_recent_updates_stored = 5;
	optional int32 max_model_version_cache_size = 6;
	optional int32 max_file_size_to_sync_bytes = 7;
	optional int32 sync_retry_max_attempts = 8;
	optional int32 sync_retry_initial_delay_ms = 9;
	optional int32 sync_retry_time_multiplier = 10;
	optional int32 file_sync_status_max_cache_size = 11;
	optional int32 successive_syncs_required_for_reliance = 12;
	optional int32 extra_successful_syncs_needed_after_errors = 13;
	optional int32 big_change_stripping_threshold_bytes = 14;
	optional int32 last_n_updates_to_send = 15;
	optional int32 file_sync_status_ttl_ms = 16;
	optional int32 sync_debounce_ms = 17;
	optional int32 sync_update_threshold = 18;
}
enum DatabaseProvider { // .aiserver.v1.DatabaseProvider
	DATABASE_PROVIDER_UNSPECIFIED = 0;
	DATABASE_PROVIDER_AURORA = 1;
	DATABASE_PROVIDER_PLANETSCALE = 2;
}
message CodeResult { // .aiserver.v1.CodeResult
	CodeBlock code_block = 1;
	float score = 2;
}
message RepositoryInfo { // .aiserver.v1.RepositoryInfo
	string relative_workspace_path = 1;
	repeated string remote_urls = 2;
	repeated string remote_names = 3;
	string repo_name = 4;
	string repo_owner = 5;
	bool is_tracked = 6;
	bool is_local = 7;
	optional int32 num_files = 8;
	optional double orthogonal_transform_seed = 9;
	optional EmbeddingModel preferred_embedding_model = 10;
	string workspace_uri = 11;
	optional DatabaseProvider preferred_db_provider = 12;
}
message BugLocation { // .aiserver.v1.BugLocation
	string file = 1;
	int32 start_line = 2;
	int32 end_line = 3;
	repeated string code_lines = 4;
}
message BugReport { // .aiserver.v1.BugReport
	repeated BugLocation locations = 1;
	string id = 2;
	string description = 3;
	optional float confidence = 4;
	optional string category = 5;
}
message BugReports { // .aiserver.v1.BugReports
	repeated BugReport bug_reports = 1;
}
enum CppFate { // .aiserver.v1.CppFate
	CPP_FATE_UNSPECIFIED = 0;
	CPP_FATE_ACCEPT = 1;
	CPP_FATE_REJECT = 2;
	CPP_FATE_PARTIAL_ACCEPT = 3;
}
enum CppSource { // .aiserver.v1.CppSource
	CPP_SOURCE_UNSPECIFIED = 0;
	CPP_SOURCE_LINE_CHANGE = 1;
	CPP_SOURCE_TYPING = 2;
	CPP_SOURCE_OPTION_HOLD = 3;
	CPP_SOURCE_LINTER_ERRORS = 4;
	CPP_SOURCE_PARAMETER_HINTS = 5;
	CPP_SOURCE_CURSOR_PREDICTION = 6;
	CPP_SOURCE_MANUAL_TRIGGER = 7;
	CPP_SOURCE_EDITOR_CHANGE = 8;
	CPP_SOURCE_LSP_SUGGESTIONS = 9;
}
message CppIntentInfo { // .aiserver.v1.CppIntentInfo
	string source = 1;
}
message LspSuggestion { // .aiserver.v1.LspSuggestion
	string label = 1;
}
message LspSuggestedItems { // .aiserver.v1.LspSuggestedItems
	repeated LspSuggestion suggestions = 1;
}
message ShouldTurnOnCppOnboardingRequest { // .aiserver.v1.ShouldTurnOnCppOnboardingRequest
}
message ShouldTurnOnCppOnboardingResponse { // .aiserver.v1.ShouldTurnOnCppOnboardingResponse
	bool should_turn_on_cpp_onboarding = 1;
}
message StreamCppRequest { // .aiserver.v1.StreamCppRequest
	enum ControlToken { // .aiserver.v1.StreamCppRequest.ControlToken
		CONTROL_TOKEN_UNSPECIFIED = 0;
		CONTROL_TOKEN_QUIET = 1;
		CONTROL_TOKEN_LOUD = 2;
		CONTROL_TOKEN_OP = 3;
	}
	CurrentFileInfo current_file = 1;
	repeated string diff_history = 2;
	optional string model_name = 3;
	optional LinterErrors linter_errors = 4;
	repeated CppContextItem context_items = 13;
	repeated string diff_history_keys = 5;
	optional bool give_debug_output = 6;
	repeated CppFileDiffHistory file_diff_histories = 7;
	repeated CppFileDiffHistory merged_diff_histories = 8;
	repeated BlockDiffPatch block_diff_patches = 9;
	optional bool is_nightly = 10;
	optional bool is_debug = 11;
	optional bool immediately_ack = 12;
	optional bool enable_more_context = 17;
	repeated CppParameterHint parameter_hints = 14;
	repeated LspSubgraphFullContext lsp_contexts = 15;
	optional CppIntentInfo cpp_intent_info = 16;
	optional string workspace_id = 18;
	repeated AdditionalFile additional_files = 19;
	optional ControlToken control_token = 20;
	optional double client_time = 21;
	repeated FilesyncUpdateWithModelVersion filesync_updates = 22;
	double time_since_request_start = 23;
	double time_at_request_send = 24;
	optional double client_timezone_offset = 25;
	optional LspSuggestedItems lsp_suggested_items = 26;
	optional bool supports_cpt = 27;
	optional bool supports_crlf_cpt = 28;
	repeated CodeResult code_results = 29;
}
message StreamCppResponse { // .aiserver.v1.StreamCppResponse
	message CursorPredictionTarget { // .aiserver.v1.StreamCppResponse.CursorPredictionTarget
		string relative_path = 1;
		int32 line_number_one_indexed = 2;
		string expected_content = 3;
		bool should_retrigger_cpp = 4;
	}
	message ModelInfo { // .aiserver.v1.StreamCppResponse.ModelInfo
		bool is_fused_cursor_prediction_model = 1;
		bool is_multidiff_model = 2;
	}
	string text = 1;
	optional int32 suggestion_start_line = 2;
	optional int32 suggestion_confidence = 3;
	optional bool done_stream = 4;
	optional string debug_model_output = 5;
	optional string debug_model_input = 6;
	optional string debug_stream_time = 7;
	optional string debug_total_time = 8;
	optional string debug_ttft_time = 9;
	optional string debug_server_timing = 10;
	optional LineRange range_to_replace = 11;
	optional CursorPredictionTarget cursor_prediction_target = 12;
	optional bool done_edit = 13;
	optional ModelInfo model_info = 14;
	optional bool begin_edit = 15;
	optional bool should_remove_leading_eol = 16;
	optional string binding_id = 17;
}
message CppConfigRequest { // .aiserver.v1.CppConfigRequest
	optional bool is_nightly = 1;
	string model = 2;
	optional bool supports_cpt = 3;
}
message CppConfigResponse { // .aiserver.v1.CppConfigResponse
	enum Heuristic { // .aiserver.v1.CppConfigResponse.Heuristic
		HEURISTIC_UNSPECIFIED = 0;
		HEURISTIC_LOTS_OF_ADDED_TEXT = 1;
		HEURISTIC_DUPLICATING_LINE_AFTER_SUGGESTION = 2;
		HEURISTIC_DUPLICATING_MULTIPLE_LINES_AFTER_SUGGESTION = 3;
		HEURISTIC_REVERTING_USER_CHANGE = 4;
		HEURISTIC_OUTPUT_EXTENDS_BEYOND_RANGE_AND_IS_REPEATED = 5;
		HEURISTIC_SUGGESTING_RECENTLY_REJECTED_EDIT = 6;
	}
	message ImportPredictionConfig { // .aiserver.v1.CppConfigResponse.ImportPredictionConfig
		bool is_disabled_by_backend = 1;
		bool should_turn_on_automatically = 2;
		bool python_enabled = 3;
	}
	message MergeBehavior { // .aiserver.v1.CppConfigResponse.MergeBehavior
		string type = 1;
		optional int32 limit = 2;
		optional int32 radius = 3;
	}
	message RecentlyRejectedEditThresholds { // .aiserver.v1.CppConfigResponse.RecentlyRejectedEditThresholds
		int32 hard_reject_threshold = 1;
		int32 soft_reject_threshold = 2;
	}
	message SuggestionHintConfig { // .aiserver.v1.CppConfigResponse.SuggestionHintConfig
		repeated string important_lsp_extensions = 1;
		repeated string enabled_for_path_extensions = 2;
	}
	optional int32 above_radius = 1;
	optional int32 below_radius = 2;
	optional MergeBehavior merge_behavior = 4;
	optional bool is_on = 5;
	optional bool is_ghost_text = 6;
	optional bool should_let_user_enable_cpp_even_if_not_pro = 7;
	repeated Heuristic heuristics = 8;
	repeated string exclude_recently_viewed_files_patterns = 9;
	bool enable_rvf_tracking = 10;
	int32 global_debounce_duration_millis = 11;
	int32 client_debounce_duration_millis = 12;
	string cpp_url = 13;
	bool use_whitespace_diff_history = 14;
	ImportPredictionConfig import_prediction_config = 15;
	bool enable_filesync_debounce_skipping = 16;
	float check_filesync_hash_percent = 17;
	string geo_cpp_backend_url = 18;
	optional RecentlyRejectedEditThresholds recently_rejected_edit_thresholds = 19;
	bool is_fused_cursor_prediction_model = 20;
	bool include_unchanged_lines = 21;
	bool should_fetch_rvf_text = 22;
	optional int32 max_number_of_cleared_suggestions_since_last_accept = 23;
	optional SuggestionHintConfig suggestion_hint_config = 24;
	bool allows_tab_chunks = 25;
	optional int32 tab_context_refresh_debounce_ms = 26;
	optional int32 tab_context_refresh_editor_change_debounce_ms = 27;
}
message SuggestedEdit { // .aiserver.v1.SuggestedEdit
	SimpleRange edit_range = 1;
	string text = 2;
}
message GetCppEditClassificationRequest { // .aiserver.v1.GetCppEditClassificationRequest
	StreamCppRequest cpp_request = 1;
	repeated SuggestedEdit suggested_edits = 25;
	bool marker_touches_green = 26;
	string current_file_contents_for_linter_errors = 27;
}
message GetCppEditClassificationResponse { // .aiserver.v1.GetCppEditClassificationResponse
	message LogProbs { // .aiserver.v1.GetCppEditClassificationResponse.LogProbs
		repeated string tokens = 1;
		repeated double token_logprobs = 2;
	}
	message ScoredEdit { // .aiserver.v1.GetCppEditClassificationResponse.ScoredEdit
		SuggestedEdit edit = 1;
		LogProbs log_probs = 2;
	}
	repeated ScoredEdit scored_edits = 1;
	ScoredEdit noop_edit = 2;
	optional bool should_noop = 3;
	ScoredEdit generation_edit = 4;
}
message AdditionalFile { // .aiserver.v1.AdditionalFile
	string relative_workspace_path = 1;
	bool is_open = 2;
	repeated string visible_range_content = 3;
	optional double last_viewed_at = 4;
	repeated int32 start_line_number_one_indexed = 5;
	repeated LineRange visible_ranges = 6;
}
message RecordCppFateRequest { // .aiserver.v1.RecordCppFateRequest
	string request_id = 1;
	float performance_now_time = 2;
	CppFate fate = 3;
	string extension = 4;
}
message RecordCppFateResponse { // .aiserver.v1.RecordCppFateResponse
}
message AvailableCppModelsRequest { // .aiserver.v1.AvailableCppModelsRequest
}
message AvailableCppModelsResponse { // .aiserver.v1.AvailableCppModelsResponse
	repeated string models = 1;
	optional string default_model = 2;
}
message StreamHoldCppRequest { // .aiserver.v1.StreamHoldCppRequest
	CurrentFileInfo current_file = 1;
	optional LinterErrors linter_errors = 4;
	repeated CppContextItem context_items = 13;
	repeated CppFileDiffHistory file_diff_histories = 7;
	repeated CppFileDiffHistory merged_diff_histories = 8;
	repeated BlockDiffPatch block_diff_patches = 9;
	ModelDetails model_details = 10;
}
message StreamHoldCppResponse { // .aiserver.v1.StreamHoldCppResponse
	string text = 1;
}
message CppFileDiffHistory { // .aiserver.v1.CppFileDiffHistory
	string file_name = 1;
	repeated string diff_history = 2;
	repeated double diff_history_timestamps = 3;
}
message RefreshTabContextRequest { // .aiserver.v1.RefreshTabContextRequest
	CurrentFileInfo current_file = 1;
	optional string model_name = 2;
	optional LinterErrors linter_errors = 3;
	repeated CppFileDiffHistory file_diff_histories = 4;
	repeated AdditionalFile additional_files = 5;
	optional double client_time = 6;
	double time_since_request_start = 7;
	double time_at_request_send = 8;
	optional bool is_debug = 9;
	optional string workspace_id = 10;
	optional bool supports_cpt = 11;
	optional bool supports_crlf_cpt = 12;
	RepositoryInfo repository_info = 13;
}
message RefreshTabContextResponse { // .aiserver.v1.RefreshTabContextResponse
	repeated CodeResult code_results = 1;
}
message CppContextItem { // .aiserver.v1.CppContextItem
	string contents = 1;
	optional string symbol = 2;
	string relative_workspace_path = 3;
	float score = 4;
}
message AddTabRequestToEvalRequest { // .aiserver.v1.AddTabRequestToEvalRequest
	string request_id = 1;
	string expected_behavior = 2;
}
message AddTabRequestToEvalResponse { // .aiserver.v1.AddTabRequestToEvalResponse
}
message MarkCppRequest { // .aiserver.v1.MarkCppRequest
	enum CppResponseTypes { // .aiserver.v1.MarkCppRequest.CppResponseTypes
		CPP_RESPONSE_TYPES_UNSPECIFIED = 0;
		CPP_RESPONSE_TYPES_GOOD = 1;
		CPP_RESPONSE_TYPES_BAD = 2;
		CPP_RESPONSE_TYPES_BAD_CONTEXT = 3;
		CPP_RESPONSE_TYPES_BAD_REASONING = 4;
		CPP_RESPONSE_TYPES_BAD_STUPID_MISTAKE = 5;
		CPP_RESPONSE_TYPES_BAD_FORMATTING = 6;
		CPP_RESPONSE_TYPES_BAD_RANGE = 7;
		CPP_RESPONSE_TYPES_GOOD_PREDICTION = 8;
		CPP_RESPONSE_TYPES_BAD_FALSE_POSITIVE_TRIGGER = 9;
		CPP_RESPONSE_TYPES_BAD_FALSE_NEGATIVE_TRIGGER = 10;
	}
	message RangeTransformation { // .aiserver.v1.MarkCppRequest.RangeTransformation
		int32 start_line_number = 1;
		int32 end_line_number = 2;
	}
	string request_id = 1;
	string session_id = 2;
	CppResponseTypes response_type = 3;
	optional string desired_completion = 4;
	RangeTransformation range_transformation = 5;
	string model_code_name = 10;
	string model_openai_name = 11;
	double current_performance_now_time = 12;
	double session_performance_origin_time = 13;
}
message CppParameterHint { // .aiserver.v1.CppParameterHint
	string label = 1;
	optional string documentation = 2;
}
message MarkCppResponse { // .aiserver.v1.MarkCppResponse
}
message IRange { // .aiserver.v1.IRange
	int32 start_line_number = 1;
	int32 start_column = 2;
	int32 end_line_number = 3;
	int32 end_column = 4;
}
message OneIndexedPosition { // .aiserver.v1.OneIndexedPosition
	int32 line_number_one_indexed = 1;
	int32 column_one_indexed = 2;
}
message CursorSelection { // .aiserver.v1.CursorSelection
	int32 selection_start_line_number = 1;
	int32 selection_start_column = 2;
	int32 position_line_number = 3;
	int32 position_column = 4;
}
message ModelChange { // .aiserver.v1.ModelChange
	string text = 1;
	IRange range = 2;
	optional string final_model_hash = 3;
	optional int32 model_version_immediately_after_this_change = 4;
	optional double performance_now_timestamp = 5;
	optional bool is_undoing = 7;
	optional bool is_redoing = 8;
	bool model_is_attached_to_editor = 9;
	bool model_is_attached_to_the_active_editor = 10;
	repeated CursorSelection cursor_selections = 11;
	int32 model_version_at_metadata_retrieval_time = 12;
	optional int64 global_index = 13;
	optional double performance_now_flush_time = 14;
	optional int32 change_index = 15;
	optional int32 flush_index = 16;
	optional int32 global_index_v2 = 17;
}
message CurrentlyShownCppSuggestion { // .aiserver.v1.CurrentlyShownCppSuggestion
	int32 suggestion_id = 1;
	string suggestion_text = 2;
	int32 model_version_when_the_change_is_first_indicated_to_the_user_but_not_shown_in_the_model = 3;
	optional IRange range_of_suggestion_in_current_model = 4;
	string original_text = 5;
	optional string binding_id = 6;
}
message CppAcceptEventNew { // .aiserver.v1.CppAcceptEventNew
	CurrentlyShownCppSuggestion cpp_suggestion = 1;
	PointInTimeModel point_in_time_model = 7;
}
message RecoverableCppData { // .aiserver.v1.RecoverableCppData
	string request_id = 1;
	string suggestion_text = 2;
	IRange suggestion_range = 3;
	OneIndexedPosition position = 4;
}
message CppSuggestEvent { // .aiserver.v1.CppSuggestEvent
	CurrentlyShownCppSuggestion cpp_suggestion = 1;
	PointInTimeModel point_in_time_model = 2;
	RecoverableCppData recoverable_cpp_data = 3;
}
message CppTriggerEvent { // .aiserver.v1.CppTriggerEvent
	string generation_uuid = 1;
	int32 model_version = 2;
	OneIndexedPosition cursor_position = 3;
	PointInTimeModel point_in_time_model = 4;
	CppSource source = 5;
}
message FinishedCppGenerationEvent { // .aiserver.v1.FinishedCppGenerationEvent
	PointInTimeModel point_in_time_model = 1;
	RecoverableCppData recoverable_cpp_data = 2;
}
message CppRejectEventNew { // .aiserver.v1.CppRejectEventNew
	CurrentlyShownCppSuggestion cpp_suggestion = 1;
	PointInTimeModel point_in_time_model = 7;
}
message Edit { // .aiserver.v1.Edit
	string text = 1;
	IRange range = 2;
}
message CppPartialAcceptEvent { // .aiserver.v1.CppPartialAcceptEvent
	CurrentlyShownCppSuggestion cpp_suggestion = 1;
	Edit edit = 2;
	PointInTimeModel point_in_time_model = 3;
}
message CursorPrediction { // .aiserver.v1.CursorPrediction
	enum CursorPredictionSource { // .aiserver.v1.CursorPrediction.CursorPredictionSource
		CURSOR_PREDICTION_SOURCE_UNSPECIFIED = 0;
		CURSOR_PREDICTION_SOURCE_ALWAYS_ON = 1;
		CURSOR_PREDICTION_SOURCE_ACCEPT = 2;
		CURSOR_PREDICTION_SOURCE_UNDO = 3;
		CURSOR_PREDICTION_SOURCE_EDITOR_CHANGE = 4;
	}
	string request_id = 1;
	int32 prediction_id = 2;
	int32 line_number = 3;
	CursorPredictionSource source = 4;
	optional string binding_id = 5;
}
message SuggestCursorPredictionEvent { // .aiserver.v1.SuggestCursorPredictionEvent
	CursorPrediction cursor_prediction = 1;
	PointInTimeModel point_in_time_model = 2;
}
message AcceptCursorPredictionEvent { // .aiserver.v1.AcceptCursorPredictionEvent
	CursorPrediction cursor_prediction = 1;
	PointInTimeModel point_in_time_model = 2;
}
message RejectCursorPredictionEvent { // .aiserver.v1.RejectCursorPredictionEvent
	CursorPrediction cursor_prediction = 1;
	PointInTimeModel point_in_time_model = 2;
}
message MaybeDefinedPointInTimeModel { // .aiserver.v1.MaybeDefinedPointInTimeModel
	optional string model_uuid = 1;
	int32 model_version = 2;
	string relative_path = 3;
	string model_id = 4;
}
message PointInTimeModel { // .aiserver.v1.PointInTimeModel
	string model_uuid = 1;
	int32 model_version = 2;
	string relative_path = 3;
	string model_id = 4;
}
message CppManualTriggerEventNew { // .aiserver.v1.CppManualTriggerEventNew
	int32 line_number_one_indexed = 1;
	int32 column_number_one_indexed = 2;
	PointInTimeModel point_in_time_model = 7;
}
message CppStoppedTrackingModelEvent { // .aiserver.v1.CppStoppedTrackingModelEvent
	enum StoppedTrackingModelReason { // .aiserver.v1.CppStoppedTrackingModelEvent.StoppedTrackingModelReason
		STOPPED_TRACKING_MODEL_REASON_UNSPECIFIED = 0;
		STOPPED_TRACKING_MODEL_REASON_FILE_TOO_BIG = 1;
		STOPPED_TRACKING_MODEL_REASON_FILE_DISPOSED = 2;
		STOPPED_TRACKING_MODEL_REASON_CHANGE_TOO_BIG = 3;
	}
	string model_uuid = 1;
	string relative_path = 2;
	StoppedTrackingModelReason reason = 3;
}
message CppLinterErrorEvent { // .aiserver.v1.CppLinterErrorEvent
	PointInTimeModel point_in_time_model = 1;
	repeated LinterError added_errors = 2;
	repeated LinterError removed_errors = 3;
	repeated LinterError errors = 4;
}
message CppDebouncedCursorMovementEvent { // .aiserver.v1.CppDebouncedCursorMovementEvent
	PointInTimeModel point_in_time_model = 1;
	OneIndexedPosition cursor_position = 2;
}
message CppEditorChangedEvent { // .aiserver.v1.CppEditorChangedEvent
	PointInTimeModel point_in_time_model = 1;
	OneIndexedPosition cursor_position = 2;
	repeated IRange visible_ranges = 3;
	string editor_id = 4;
}
message CppCopyEvent { // .aiserver.v1.CppCopyEvent
	string clipboard_contents = 1;
}
message CppQuickActionCommand { // .aiserver.v1.CppQuickActionCommand
	string title = 1;
	string id = 2;
	repeated string arguments = 3;
}
message CppQuickAction { // .aiserver.v1.CppQuickAction
	message Edit { // .aiserver.v1.CppQuickAction.Edit
		string text = 1;
		IRange range = 2;
	}
	string title = 1;
	repeated Edit edits = 2;
	optional bool is_preferred = 3;
	CppQuickActionCommand command = 4;
}
message CppChangeQuickActionEvent { // .aiserver.v1.CppChangeQuickActionEvent
	PointInTimeModel point_in_time_model = 1;
	repeated CppQuickAction added = 2;
	repeated CppQuickAction removed = 3;
	repeated CppQuickAction actions = 4;
}
message CppQuickActionFireEvent { // .aiserver.v1.CppQuickActionFireEvent
	PointInTimeModel point_in_time_model = 1;
	oneof action_identifier {
		CppQuickActionCommand quick_action_command = 2;
		CppQuickAction quick_action_event = 3;
	}
}
message CmdKEvent { // .aiserver.v1.CmdKEvent
	message SubmitPrompt { // .aiserver.v1.CmdKEvent.SubmitPrompt
		IRange original_range = 1;
		string original_text = 2;
		string prompt = 3;
	}
	message EndOfGeneration { // .aiserver.v1.CmdKEvent.EndOfGeneration
	}
	message InterruptGeneration { // .aiserver.v1.CmdKEvent.InterruptGeneration
	}
	message AcceptDiffs { // .aiserver.v1.CmdKEvent.AcceptDiffs
	}
	message RejectDiffs { // .aiserver.v1.CmdKEvent.RejectDiffs
		optional string actor_request_id = 1;
		optional bool silent = 2;
	}
	message AcceptPartialDiff { // .aiserver.v1.CmdKEvent.AcceptPartialDiff
		IRange green_range = 1;
		repeated string green_lines = 2;
		repeated string red_lines = 3;
	}
	message RejectPartialDiff { // .aiserver.v1.CmdKEvent.RejectPartialDiff
		IRange green_range = 1;
		repeated string green_lines = 2;
		repeated string red_lines = 3;
	}
	message AfterReject { // .aiserver.v1.CmdKEvent.AfterReject
	}
	PointInTimeModel point_in_time_model = 1;
	string request_id = 2;
	optional string prompt_bar_id = 20;
	oneof event_type {
		SubmitPrompt submit_prompt = 3;
		EndOfGeneration end_of_generation = 4;
		InterruptGeneration interrupt_generation = 5;
		AcceptDiffs accept_all = 6;
		RejectDiffs reject_all = 7;
		RejectPartialDiff reject_partial_diff = 8;
		AcceptPartialDiff accept_partial_diff = 9;
		AfterReject after_reject = 10;
	}
}
message ChatEvent { // .aiserver.v1.ChatEvent
	message SubmitPrompt { // .aiserver.v1.ChatEvent.SubmitPrompt
		string prompt = 1;
	}
	message EndOfAnyGeneration { // .aiserver.v1.ChatEvent.EndOfAnyGeneration
	}
	message EndOfUninterruptedGeneration { // .aiserver.v1.ChatEvent.EndOfUninterruptedGeneration
	}
	string request_id = 1;
	oneof event_type {
		SubmitPrompt submit_prompt = 2;
		EndOfAnyGeneration end_of_any_generation = 3;
		EndOfUninterruptedGeneration end_of_uninterrupted_generation = 4;
	}
}
message BugBotLinterEvent { // .aiserver.v1.BugBotLinterEvent
	message Started { // .aiserver.v1.BugBotLinterEvent.Started
	}
	message LintGenerated { // .aiserver.v1.BugBotLinterEvent.LintGenerated
		BugReport bug_report = 1;
	}
	message LintDismissed { // .aiserver.v1.BugBotLinterEvent.LintDismissed
		string bug_report_id = 1;
	}
	message UserFeedback { // .aiserver.v1.BugBotLinterEvent.UserFeedback
		string bug_report_id = 1;
		string feedback = 2;
	}
	message ViewedReport { // .aiserver.v1.BugBotLinterEvent.ViewedReport
		string bug_report_id = 1;
	}
	message UnviewedReport { // .aiserver.v1.BugBotLinterEvent.UnviewedReport
		string bug_report_id = 1;
	}
	message NotShownBecauseHeuristic { // .aiserver.v1.BugBotLinterEvent.NotShownBecauseHeuristic
		enum Heuristic { // .aiserver.v1.BugBotLinterEvent.NotShownBecauseHeuristic.Heuristic
			HEURISTIC_UNSPECIFIED = 0;
			HEURISTIC_LINT_OVERLAP = 1;
			HEURISTIC_LINES_MISMATCH = 2;
		}
		Heuristic heuristic = 1;
	}
	string request_id = 1;
	PointInTimeModel point_in_time_model = 2;
	oneof event_type {
		LintGenerated lint_generated = 3;
		LintDismissed lint_dismissed = 4;
		UserFeedback user_feedback = 5;
		ViewedReport viewed_report = 6;
		UnviewedReport unviewed_report = 7;
		Started started = 8;
		NotShownBecauseHeuristic not_shown_because_heuristic = 9;
	}
}
message BugBotEvent { // .aiserver.v1.BugBotEvent
	enum BackgroundIntervalInterruptedReason { // .aiserver.v1.BugBotEvent.BackgroundIntervalInterruptedReason
		BACKGROUND_INTERVAL_INTERRUPTED_REASON_UNSPECIFIED = 0;
		BACKGROUND_INTERVAL_INTERRUPTED_REASON_DISABLED = 1;
		BACKGROUND_INTERVAL_INTERRUPTED_REASON_TOO_RECENT = 2;
		BACKGROUND_INTERVAL_INTERRUPTED_REASON_UNVIEWED_BUG_REPORTS = 3;
		BACKGROUND_INTERVAL_INTERRUPTED_REASON_NOT_IN_GIT_REPO = 4;
		BACKGROUND_INTERVAL_INTERRUPTED_REASON_DEFAULT_BRANCH_IS_NOT_CURRENT_BRANCH = 5;
		BACKGROUND_INTERVAL_INTERRUPTED_REASON_NO_GIT_USER = 6;
		BACKGROUND_INTERVAL_INTERRUPTED_REASON_NO_LAST_COMMIT = 7;
		BACKGROUND_INTERVAL_INTERRUPTED_REASON_LAST_COMMIT_NOT_MADE_BY_USER = 8;
		BACKGROUND_INTERVAL_INTERRUPTED_REASON_LAST_COMMIT_TOO_OLD = 9;
		BACKGROUND_INTERVAL_INTERRUPTED_REASON_DIFF_TOO_LONG = 10;
		BACKGROUND_INTERVAL_INTERRUPTED_REASON_DIFF_TOO_SHORT = 11;
		BACKGROUND_INTERVAL_INTERRUPTED_REASON_TELEMETRY_UNHEALTHY = 12;
	}
	message Started { // .aiserver.v1.BugBotEvent.Started
	}
	message ReportsGenerated { // .aiserver.v1.BugBotEvent.ReportsGenerated
		BugReports bug_reports = 1;
	}
	message PressedFixInComposer { // .aiserver.v1.BugBotEvent.PressedFixInComposer
		string bug_report_id = 1;
	}
	message PressedAddToChat { // .aiserver.v1.BugBotEvent.PressedAddToChat
		string bug_report_id = 1;
	}
	message PressedOpenInEditor { // .aiserver.v1.BugBotEvent.PressedOpenInEditor
		BugLocation bug_location = 1;
		string bug_report_id = 2;
	}
	message ViewedReport { // .aiserver.v1.BugBotEvent.ViewedReport
		message ReportView { // .aiserver.v1.BugBotEvent.ViewedReport.ReportView
			string bug_report_id = 1;
			double view_percentage = 2;
			double text_percentage = 3;
		}
		int32 seconds_viewed = 1;
		repeated ReportView report_views = 2;
	}
	message UserFeedback { // .aiserver.v1.BugBotEvent.UserFeedback
		string bug_report_id = 1;
		string feedback = 2;
	}
	message BackgroundIntervalStarted { // .aiserver.v1.BugBotEvent.BackgroundIntervalStarted
	}
	message BackgroundIntervalEnded { // .aiserver.v1.BugBotEvent.BackgroundIntervalEnded
		bool success = 1;
	}
	message BackgroundIntervalInterrupted { // .aiserver.v1.BugBotEvent.BackgroundIntervalInterrupted
		BackgroundIntervalInterruptedReason reason = 1;
	}
	message BackgroundIntervalErrored { // .aiserver.v1.BugBotEvent.BackgroundIntervalErrored
		string error_message = 1;
	}
	string request_id = 1;
	oneof event_type {
		Started started = 2;
		ReportsGenerated reports_generated = 3;
		PressedFixInComposer pressed_fix_in_composer = 4;
		PressedOpenInEditor pressed_open_in_editor = 5;
		ViewedReport viewed_report = 6;
		UserFeedback user_feedback = 7;
		PressedAddToChat pressed_add_to_chat = 8;
		BackgroundIntervalStarted background_interval_started = 9;
		BackgroundIntervalEnded background_interval_ended = 10;
		BackgroundIntervalInterrupted background_interval_interrupted = 11;
		BackgroundIntervalErrored background_interval_errored = 12;
	}
}
message AiRequestEvent { // .aiserver.v1.AiRequestEvent
	enum RequestType { // .aiserver.v1.AiRequestEvent.RequestType
		REQUEST_TYPE_UNSPECIFIED = 0;
		REQUEST_TYPE_START = 1;
		REQUEST_TYPE_END = 2;
	}
	enum Source { // .aiserver.v1.AiRequestEvent.Source
		SOURCE_UNSPECIFIED = 0;
		SOURCE_CHAT = 1;
		SOURCE_CMDK = 2;
		SOURCE_APPLY = 3;
		SOURCE_COMPOSER = 4;
		SOURCE_TASK = 5;
		SOURCE_CODE_INTERPRETER = 6;
		SOURCE_INTERPRETER_EXECUTION = 7;
	}
	RequestType request_type = 1;
	string request_id = 2;
	Source source = 3;
}
message ModelOpenedEvent { // .aiserver.v1.ModelOpenedEvent
	PointInTimeModel point_in_time_model = 1;
	MaybeDefinedPointInTimeModel maybe_defined_point_in_time_model = 2;
}
message BackgroundFilesEvent { // .aiserver.v1.BackgroundFilesEvent
	message BackgroundFile { // .aiserver.v1.BackgroundFilesEvent.BackgroundFile
		string relative_workspace_path = 1;
		string contents = 2;
		string hash = 3;
		string full_path = 4;
	}
	repeated BackgroundFile files = 2;
}
message ScrollEvent { // .aiserver.v1.ScrollEvent
	PointInTimeModel point_in_time_model = 1;
	repeated IRange visible_ranges = 2;
	string editor_id = 3;
}
message EditorCloseEvent { // .aiserver.v1.EditorCloseEvent
	string editor_id = 1;
}
message TabCloseEvent { // .aiserver.v1.TabCloseEvent
	MaybeDefinedPointInTimeModel point_in_time_model = 1;
}
message ModelAddedEvent { // .aiserver.v1.ModelAddedEvent
	MaybeDefinedPointInTimeModel point_in_time_model = 1;
	string full_uri = 2;
	string model_id = 3;
	string uri_scheme = 4;
	bool is_too_large_for_syncing = 5;
	bool is_too_large_for_tokenization = 6;
	bool is_too_large_for_heap_operation = 7;
}
message AnythingQuickAccessItem { // .aiserver.v1.AnythingQuickAccessItem
	message Resource { // .aiserver.v1.AnythingQuickAccessItem.Resource
		optional PointInTimeModel model = 1;
		optional IRange range = 2;
		optional string uri = 3;
	}
	oneof item {
		Resource resource = 1;
		string separator = 2;
		string section = 3;
	}
}
message AnythingQuickAccessSelectionEvent { // .aiserver.v1.AnythingQuickAccessSelectionEvent
	string query = 1;
	repeated AnythingQuickAccessItem items = 2;
	repeated int32 selected_indices = 3;
}
message LspSuggestionEvent { // .aiserver.v1.LspSuggestionEvent
	repeated string suggestions = 1;
	optional string request_id = 2;
	optional string editor_id = 3;
	PointInTimeModel point_in_time_model = 4;
}
message CppSessionEvent { // .aiserver.v1.CppSessionEvent
	oneof event {
		CppAcceptEventNew accept_event = 2;
		CppRejectEventNew reject_event = 3;
		CppManualTriggerEventNew manual_trigger_event = 4;
		CppStoppedTrackingModelEvent stopped_tracking_model_event = 6;
		CppSuggestEvent suggest_event = 7;
		CppLinterErrorEvent linter_error_event = 8;
		CppDebouncedCursorMovementEvent debounced_cursor_movement_event = 9;
		CppEditorChangedEvent editor_changed_event = 10;
		CppCopyEvent copy_event = 11;
		CppChangeQuickActionEvent quick_action_event = 13;
		CppQuickActionFireEvent quick_action_fire_event = 14;
		ModelOpenedEvent model_opened_event = 15;
		CmdKEvent cmd_k_event = 17;
		ChatEvent chat_event = 18;
		AiRequestEvent ai_event = 19;
		ScrollEvent scroll_event = 21;
		EditorCloseEvent editor_close_event = 22;
		TabCloseEvent tab_close_event = 23;
		ModelAddedEvent model_added_event = 33;
		CppPartialAcceptEvent partial_accept_event = 26;
		AcceptCursorPredictionEvent accept_cursor_prediction_event = 27;
		RejectCursorPredictionEvent reject_cursor_prediction_event = 28;
		SuggestCursorPredictionEvent suggest_cursor_prediction_event = 29;
		CppTriggerEvent cpp_trigger_event = 30;
		FinishedCppGenerationEvent finished_cpp_generation_event = 31;
		BugBotEvent bug_bot_event = 32;
		BugBotLinterEvent bug_bot_linter_event = 34;
		AnythingQuickAccessSelectionEvent anything_quick_access_selection_event = 35;
		LspSuggestionEvent lsp_suggestion_event = 36;
		NtpEvent ntp_event = 37;
		RepoEvent repo_event = 38;
		GitEvent git_event = 39;
		ToolCallEvent tool_call_event = 40;
		BeforeAiEditEvent before_ai_edit_event = 46;
		BackgroundFilesEvent background_files_event = 16;
	}
	double performance_now_timestamp = 5;
	optional double performance_time_origin = 25;
	optional int64 global_index = 41;
	optional double performance_now_flush_time = 42;
	optional int32 event_index = 43;
	optional int32 flush_index = 44;
	optional int32 global_index_v2 = 45;
}
message BeforeAiEditEvent { // .aiserver.v1.BeforeAiEditEvent
	oneof model {
		PointInTimeModel point_in_time_model = 1;
		string relative_workspace_path = 5;
	}
	string tool_call_id = 2;
	optional string request_id = 3;
	optional string tool_name = 4;
}
message CppAppendRequest { // .aiserver.v1.CppAppendRequest
	bytes changes = 1;
}
message CppAppendResponse { // .aiserver.v1.CppAppendResponse
	bool success = 1;
}
message EditHistoryAppendChangesRequest { // .aiserver.v1.EditHistoryAppendChangesRequest
	enum PrivacyModeStatus { // .aiserver.v1.EditHistoryAppendChangesRequest.PrivacyModeStatus
		PRIVACY_MODE_STATUS_UNSPECIFIED = 0;
		PRIVACY_MODE_STATUS_PRIVACY_ENABLED = 1;
		PRIVACY_MODE_STATUS_IMPLICIT_NO_PRIVACY = 2;
		PRIVACY_MODE_STATUS_EXPLICIT_NO_PRIVACY = 3;
	}
	string session_id = 1;
	string model_uuid = 2;
	optional string starting_model_value = 3;
	optional int32 starting_model_version = 10;
	string relative_path = 5;
	string uri = 14;
	string client_version = 6;
	optional string client_commit = 8;
	repeated ModelChange changes = 4;
	repeated CppSessionEvent session_events = 9;
	bool model_changes_may_be_out_of_order = 11;
	PrivacyModeStatus privacy_mode_status = 12;
	repeated CppHistoryAppendEvent events = 7;
	float time_origin = 13;
}
message EditHistoryAppendChangesResponse { // .aiserver.v1.EditHistoryAppendChangesResponse
	bool success = 1;
}
message CppEditHistoryStatusRequest { // .aiserver.v1.CppEditHistoryStatusRequest
}
message CppEditHistoryStatusResponse { // .aiserver.v1.CppEditHistoryStatusResponse
	bool on = 1;
	bool only_if_explicit = 2;
}
message BlockDiffPatch { // .aiserver.v1.BlockDiffPatch
	message Change { // .aiserver.v1.BlockDiffPatch.Change
		string text = 1;
		IRange range = 2;
	}
	message ModelWindow { // .aiserver.v1.BlockDiffPatch.ModelWindow
		repeated string lines = 1;
		int32 start_line_number = 2;
		int32 end_line_number = 3;
	}
	ModelWindow start_model_window = 1;
	repeated Change changes = 3;
	string relative_path = 4;
	string model_uuid = 7;
	int32 start_from_change_index = 5;
}
message CppHistoryAppendEvent { // .aiserver.v1.CppHistoryAppendEvent
	oneof event {
		ModelChange model_change = 1;
		CppAcceptEvent accept_event = 2;
		CppRejectEvent reject_event = 3;
		CppManualTriggerEvent manual_trigger_event = 4;
	}
	optional string final_model_hash = 10;
}
message CppManualTriggerEvent { // .aiserver.v1.CppManualTriggerEvent
	CursorPosition position = 2;
}
message CppAcceptEvent { // .aiserver.v1.CppAcceptEvent
	CppSuggestion cpp_suggestion = 1;
}
message CppRejectEvent { // .aiserver.v1.CppRejectEvent
	CppSuggestion cpp_suggestion = 1;
}
message CppSuggestion { // .aiserver.v1.CppSuggestion
	string suggestion_text = 1;
	IRange range = 2;
	bool seen = 5;
	SelectionWithOrientation editor_selection_before_peek = 6;
	optional string binding_id = 7;
}
message NtpEvent { // .aiserver.v1.NtpEvent
	double originate_timestamp = 1;
	double receive_timestamp = 2;
	double transmit_timestamp = 3;
	double destination_timestamp = 4;
}
message RepoEvent { // .aiserver.v1.RepoEvent
	enum Type { // .aiserver.v1.RepoEvent.Type
		TYPE_UNSPECIFIED = 0;
		TYPE_SYNCED = 1;
		TYPE_LOADING = 2;
		TYPE_INDEXING_SETUP = 3;
		TYPE_INDEXING_INIT_FROM_SIMILAR_CODEBASE = 4;
		TYPE_PAUSED = 5;
		TYPE_INDEXING = 6;
		TYPE_ERROR = 7;
		TYPE_NOT_AUTO_INDEXING = 8;
		TYPE_NOT_INDEXED = 9;
	}
	string repo_owner = 1;
	string repo_name = 2;
	Type event_type = 3;
}
message GitEvent { // .aiserver.v1.GitEvent
	enum OperationType { // .aiserver.v1.GitEvent.OperationType
		OPERATION_TYPE_UNSPECIFIED = 0;
		OPERATION_TYPE_COMMIT = 1;
		OPERATION_TYPE_CHECKOUT = 2;
		OPERATION_TYPE_PULL = 3;
		OPERATION_TYPE_FETCH = 4;
		OPERATION_TYPE_MERGE = 5;
		OPERATION_TYPE_REBASE = 6;
		OPERATION_TYPE_STASH = 7;
		OPERATION_TYPE_BRANCH = 8;
		OPERATION_TYPE_TAG = 9;
	}
	OperationType operation_type = 1;
	string repository_path = 2;
	bool operation_success = 3;
	optional string branch_name = 4;
	optional string error_message = 5;
	optional bool is_default_branch = 6;
	optional string default_branch_name = 7;
	optional string commit_hash = 8;
	optional string previous_commit_hash = 9;
	optional string remote_url = 10;
}
message ToolCallEvent { // .aiserver.v1.ToolCallEvent
	string tool_call_id = 1;
	string request_id = 2;
	string tool_name = 3;
}
service FileSyncService { // .aiserver.v1.FileSyncService
	rpc FSUploadFile(FSUploadFileRequest) returns (FSUploadFileResponse); // Unary
	rpc FSSyncFile(FSSyncFileRequest) returns (FSSyncFileResponse); // Unary
	rpc FSIsEnabledForUser(FSIsEnabledForUserRequest) returns (FSIsEnabledForUserResponse); // Unary
	rpc FSConfig(FSConfigRequest) returns (FSConfigResponse); // Unary
	rpc FSGetFileContents(FSGetFileContentsRequest) returns (FSGetFileContentsResponse); // Unary
	rpc FSGetMultiFileContents(FSGetMultiFileContentsRequest) returns (FSGetMultiFileContentsResponse); // Unary
}
service CppService { // .aiserver.v1.CppService
	rpc MarkCppForEval(MarkCppRequest) returns (MarkCppResponse); // Unary
	rpc StreamHoldCpp(StreamHoldCppRequest) returns (stream StreamHoldCppResponse); // ServerStreaming
	rpc AvailableModels(AvailableCppModelsRequest) returns (AvailableCppModelsResponse); // Unary
	rpc RecordCppFate(RecordCppFateRequest) returns (RecordCppFateResponse); // Unary
	rpc AddTabRequestToEval(AddTabRequestToEvalRequest) returns (AddTabRequestToEvalResponse); // Unary
}
message IsCursorPredictionEnabledRequest { // .aiserver.v1.IsCursorPredictionEnabledRequest
}
message IsCursorPredictionEnabledResponse { // .aiserver.v1.IsCursorPredictionEnabledResponse
	bool enabled = 1;
}
message StreamNextCursorPredictionRequest { // .aiserver.v1.StreamNextCursorPredictionRequest
	message VisibleRange { // .aiserver.v1.StreamNextCursorPredictionRequest.VisibleRange
		int32 start_line_number_inclusive = 1;
		int32 end_line_number_exclusive = 2;
	}
	message FileVisibleRange { // .aiserver.v1.StreamNextCursorPredictionRequest.FileVisibleRange
		string filename = 1;
		repeated VisibleRange visible_ranges = 2;
	}
	CurrentFileInfo current_file = 1;
	repeated string diff_history = 2;
	optional string model_name = 3;
	optional LinterErrors linter_errors = 4;
	repeated CppContextItem context_items = 13;
	repeated string diff_history_keys = 5;
	optional bool give_debug_output = 6;
	repeated CppFileDiffHistory file_diff_histories = 7;
	repeated CppFileDiffHistory merged_diff_histories = 8;
	repeated BlockDiffPatch block_diff_patches = 9;
	optional bool is_nightly = 10;
	optional bool is_debug = 11;
	optional bool immediately_ack = 12;
	optional bool enable_more_context = 17;
	repeated CppParameterHint parameter_hints = 14;
	repeated LspSubgraphFullContext lsp_contexts = 15;
	optional CppIntentInfo cpp_intent_info = 16;
	optional string workspace_id = 18;
	repeated FilesyncUpdateWithModelVersion file_sync_updates = 19;
	repeated FileVisibleRange file_visible_ranges = 20;
}
message StreamNextCursorPredictionResponse { // .aiserver.v1.StreamNextCursorPredictionResponse
	oneof response {
		string text = 1;
		int32 line_number = 2;
		bool is_not_in_range = 3;
		string file_name = 4;
	}
}
service AiService { // .aiserver.v1.AiService
	rpc ShouldTurnOnCppOnboarding(ShouldTurnOnCppOnboardingRequest) returns (ShouldTurnOnCppOnboardingResponse); // Unary
	rpc StreamCpp(StreamCppRequest) returns (stream StreamCppResponse); // ServerStreaming
	rpc CppConfig(CppConfigRequest) returns (CppConfigResponse); // Unary
	rpc CppEditHistoryStatus(CppEditHistoryStatusRequest) returns (CppEditHistoryStatusResponse); // Unary
	rpc CppAppend(CppAppendRequest) returns (CppAppendResponse); // Unary
	rpc RefreshTabContext(RefreshTabContextRequest) returns (RefreshTabContextResponse); // Unary
	rpc StreamNextCursorPrediction(StreamNextCursorPredictionRequest) returns (stream StreamNextCursorPredictionResponse); // ServerStreaming
	rpc IsCursorPredictionEnabled(IsCursorPredictionEnabledRequest) returns (IsCursorPredictionEnabledResponse); // Unary
	rpc GetCppEditClassification(GetCppEditClassificationRequest) returns (GetCppEditClassificationResponse); // Unary
	rpc CppEditHistoryAppend(EditHistoryAppendChangesRequest) returns (EditHistoryAppendChangesResponse); // Unary
}
message CursorPredictionConfigRequest { // .aiserver.v1.CursorPredictionConfigRequest
}
message CursorPredictionModel { // .aiserver.v1.CursorPredictionModel
	string name = 1;
	int32 radius = 2;
}
message CursorPredictionConfigResponse { // .aiserver.v1.CursorPredictionConfigResponse
	enum Heuristic { // .aiserver.v1.CursorPredictionConfigResponse.Heuristic
		HEURISTIC_UNSPECIFIED = 0;
		HEURISTIC_DISABLE_IN_LAST_CPP_SUGGESTION = 1;
	}
	repeated CursorPredictionModel models = 1;
	string default_model = 2;
	repeated Heuristic heuristics = 3;
}
service CursorPredictionService { // .aiserver.v1.CursorPredictionService
	rpc CursorPredictionConfig(CursorPredictionConfigRequest) returns (CursorPredictionConfigResponse); // Unary
}
